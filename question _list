1. Deployment Strategies 
ans - 
| Strategy        | Downtime | Rollback | Complexity | Cost    |
| --------------- | -------- | -------- | ---------- | ------- |
| Recreate        | High     | Manual   | Low        | Low     |
| Rolling         | Low      | Hard     | Medium     | Medium  |
| Blue-Green      | None     | Easy     | Medium     | High    |
| Canary          | None     | Easy     | High       | Medium  |
| A/B Testing     | None     | Hard     | High       | Medium  |
| Shadow          | None     | N/A      | High       | High    |
| Feature Toggles | None     | Easy     | High       | Low-Med |

2. What is artifact Repo?
Ans - An Artifact Repository is a centralized storage location where compiled code (also called artifacts) like .jar, .war, .zip, .tar.gz, .deb, .rpm, Docker images, and more are stored and managed for use in deployments.

3. How will you trace back to the source code when all team members are changed ?
‚úÖ 1. Check the Git Repository (Version Control System)
‚úÖ 2. Look at Branching and Tagging
‚úÖ 3. Review CI/CD Pipelines
‚úÖ 4. Trace Artifacts to Commits
‚úÖ 5. Use Ticketing System Integration
‚úÖ 6. Explore Infrastructure as Code & Docs
‚úÖ 7. Audit Logs & Access Logs
‚úÖ 8. Reverse Engineer if Needed
4. Secuirty Measures taken in devops 
| Stage       | Security Practices                              |
| ----------- | ----------------------------------------------- |
| **Code**    | Linting, SAST, secret scanning                  |
| **Build**   | Dependency scanning, artifact signing           |
| **Test**    | DAST, container scanning, test coverage reports |
| **Release** | Signed artifacts, change approvals              |
| **Deploy**  | Role-based access, infra-as-code hardening      |
| **Operate** | Logging, monitoring, patch management, MFA      |

5 ‚úÖ What is SonarQube?
SonarQube is an open-source platform used to continuously inspect the quality of code. It helps detect bugs, vulnerabilities, code smells, and technical debt in your source code.
üîç Key Features:
| Feature                    | Description                                                       |
| -------------------------- | ----------------------------------------------------------------- |
| **Static Code Analysis**   | Analyzes source code without executing it                         |
| **Multi-language Support** | Supports Java, Python, JavaScript, C#, Go, etc.                   |
| **Quality Gates**          | Define rules (e.g., "no new critical bugs") to pass/fail builds   |
| **Security Scanning**      | Finds vulnerabilities and insecure coding patterns                |
| **Integration**            | Works with Jenkins, GitHub Actions, Azure DevOps, GitLab CI, etc. |
| **Reports**                | Dashboards showing test coverage, duplication, complexity, etc.   |

üéØ Why It's Important in DevOps:
Ensures clean code before deployment
Detects issues early in the CI/CD pipeline
Improves maintainability and security
Helps enforce coding standards

How did you secure your infrastructure in DevOps?

‚úÖ Security Measures I Used in DevOps Infrastructure
üîê 1. IAM & Access Control
Used principle of least privilege for all IAM roles and users
Enabled MFA (Multi-Factor Authentication) for all users
Created separate roles for CI/CD tools with restricted permissions
Used temporary access tokens (e.g., IAM roles in EC2, STS in AWS)

üîê 2. Secrets Management
Stored secrets in tools like:
AWS Secrets Manager
Vault by HashiCorp
Kubernetes Secrets
Avoided hardcoding secrets in code or pipelines
Rotated secrets and tokens periodically

üîê 3. Network Security
Used VPCs with private/public subnet separation
Deployed NACLs and Security Groups to restrict inbound/outbound traffic
Enabled bastion hosts for SSH into private instances
Restricted access to ports (e.g., only expose 22, 443, 80 as needed)

üîê 4. Data Security
Enabled encryption at rest and in transit using:
AWS KMS
SSL/TLS for web and DB connections
Encrypted S3 buckets, RDS, and EBS volumes

üîê 5. CI/CD Pipeline Security
Restricted who can trigger pipelines
Scanned code using:
SonarQube for code quality
Trivy, Grype, or AquaSec for container scans
Checkov or tfsec for IaC security
Used signed Git commits and protected branches

üîê 6. Container & Kubernetes Security
Used non-root users in Dockerfiles
Scanned container images before pushing to registry
Enabled RBAC in Kubernetes
Used network policies to control pod communication
Enabled audit logging in Kubernetes

üîê 7. Monitoring & Alerts
Integrated Prometheus/Grafana, CloudWatch, and ELK/EFK stack
Set up alerts for:
Unauthorized access
Security group changes
High CPU or suspicious activity


6. what is the difference between monolithic architecture and microservices

| Feature                 | **Monolithic Architecture**                                           | **Microservices Architecture**                                 |
| ----------------------- | --------------------------------------------------------------------- | -------------------------------------------------------------- |
| **Definition**          | A single unified application where all components are tightly coupled | An application broken into small, independent services         |
| **Deployment**          | Deployed as one unit (WAR/JAR/EXE)                                    | Each service is deployed independently                         |
| **Codebase**            | One large codebase                                                    | Multiple smaller codebases per service                         |
| **Scaling**             | Scales as a whole ‚Äî even if only one part needs it                    | Scales individual services independently                       |
| **Technology Stack**    | Usually uses a single tech stack                                      | Each service can use different languages or technologies       |
| **Failure Impact**      | One failure can bring down the entire application                     | Failure is isolated to the specific microservice               |
| **Development Speed**   | Slower for larger teams due to shared codebase                        | Faster as teams work on independent services                   |
| **Testing & Debugging** | Easier initially; harder as app grows                                 | Requires more effort (e.g., distributed tracing)               |
| **CI/CD Pipelines**     | One pipeline for the entire app                                       | Separate CI/CD pipelines per microservice                      |
| **Ideal For**           | Small to medium applications                                          | Large, complex, or evolving applications requiring scalability |


7. what is statefull and stateless applications ?

| Feature                | **Stateful Application**                               | **Stateless Application**                          |
| ---------------------- | ------------------------------------------------------ | -------------------------------------------------- |
| **Definition**         | Stores client/session data between requests            | Does **not** store session info between requests   |
| **Session Handling**   | Remembers previous interactions                        | Each request is independent                        |
| **Examples**           | Databases, chat apps, file storage services            | Web APIs, authentication services, load balancers  |
| **Scalability**        | Harder to scale (must preserve state across instances) | Easier to scale (no dependency on prior state)     |
| **Failure Recovery**   | Requires special handling (e.g., persistent storage)   | Easier recovery (can redeploy without losing data) |
| **Kubernetes Storage** | Needs **persistent volume (PVC)**                      | Doesn't need persistent storage                    |

8. docker image vs container

| üîç Feature      | üßä **Docker Image**                                              | üì¶ **Docker Container**                                     |
| --------------- | ---------------------------------------------------------------- | ----------------------------------------------------------- |
| **Definition**  | A **read-only** template with instructions to create a container | A **runtime instance** of a Docker image                    |
| **State**       | **Static** and immutable                                         | **Dynamic** and mutable (can be started, stopped, deleted)  |
| **Usage**       | Used to create containers                                        | Actual running application based on an image                |
| **Storage**     | Stored in image registries (like DockerHub, ECR, etc.)           | Runs in Docker engine with its own writable layer           |
| **Persistence** | Doesn‚Äôt change once built                                        | Can write data, logs, and files during execution            |
| **Example**     | `python:3.10`, `nginx:latest`, `ubuntu:20.04`                    | A running `nginx` web server container using `nginx:latest` |

9. üßæ Scripted vs Declarative Jenkins Pipelines

| Feature                | üßë‚Äçüíª **Scripted Pipeline**          | üìò **Declarative Pipeline**                                 |
| ---------------------- | ------------------------------------ | ----------------------------------------------------------- |
| **Syntax Style**       | Based on **Groovy scripting**        | Uses a more **structured, YAML-like syntax**                |
| **Flexibility**        | Highly flexible and powerful         | Simpler, more readable, but less flexible                   |
| **Ease of Use**        | Requires **Groovy knowledge**        | Beginner-friendly and easy to learn                         |
| **Structure**          | No strict structure ‚Äî free-form code | Follows a strict structure (`pipeline {}` block required)   |
| **Error Handling**     | Manual try-catch required            | Has built-in `post` blocks (success, failure, always, etc.) |
| **Parallel Execution** | More complex to implement            | Easier to implement with `parallel` block                   |
| **Best For**           | Advanced/custom pipelines            | Most common CI/CD workflows                                 |
| **Example Keyword**    | `node`, `stage`, `echo`              | `pipeline`, `stages`, `steps`, `environment`                |

10. ‚úÖ Code Quality vs Code Coverage

| Feature                                  | **Code Quality**                                                        | **Code Coverage**                                          |
| ---------------------------------------- | ----------------------------------------------------------------------- | ---------------------------------------------------------- |
| **Definition**                           | Measure of how well code adheres to **best practices**                  | Measure of how much of the code is **executed by tests**   |
| **Focus**                                | Code structure, maintainability, readability, security                  | Test effectiveness and code tested                         |
| **Evaluates**                            | Naming, complexity, duplication, style, security issues                 | What % of lines, branches, or functions are tested         |
| **Tool Examples**                        | SonarQube, ESLint, Pylint, PMD                                          | Jacoco, Istanbul, Cobertura, Coverage.py                   |
| **Output**                               | Quality score, issue list, code smells, technical debt                  | Coverage % (e.g., 80% of lines covered)                    |
| **Importance**                           | Helps prevent bugs and improve maintainability                          | Ensures tests are comprehensive and reduce blind spots     |
| **Can you have high without the other?** | Yes. You can have high coverage with poor-quality code, and vice versa. | Yes. You might test everything, but still write messy code |

| Concept           | Analogy                                                       |
| ----------------- | ------------------------------------------------------------- |
| **Code Quality**  | Writing a clean, grammatically correct essay                  |
| **Code Coverage** | Proofreading the essay to make sure every sentence is checked |

11. How to run a yaml manifest without a yaml manifest file created.
You can run a YAML manifest without creating a physical .yaml file by using kubectl apply -f - and piping the YAML content directly into it via standard input (stdin).

12. What is default quality gate in sonar
The default quality gate in SonarQube is called Sonar way. It blocks promotion of code if new issues like bugs, vulnerabilities, or poor coverage are introduced. 
It‚Äôs a key tool for enforcing continuous code quality in CI/CD pipelines.‚Äù

